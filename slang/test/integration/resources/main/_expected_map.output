part of 'translations.cgm.dart';

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.

extension on Translations {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'onboarding.welcome': return ({required Object fullName}) => 'Welcome ${fullName}';
			case 'onboarding.bye': return ({required Object firstName}) => 'Bye ${firstName}';
			case 'onboarding.hi': return ({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
				const TextSpan(text: 'Hi '),
				name,
				TextSpan(text: ' and ${_root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)}'),
			]);
			case 'onboarding.pages.0.title': return 'First Page';
			case 'onboarding.pages.0.content': return 'First Page Content';
			case 'onboarding.pages.1.title': return 'Second Page';
			case 'onboarding.modifierPages.0.title': return 'First Modifier Page';
			case 'onboarding.modifierPages.0.content': return 'First Page Content';
			case 'onboarding.modifierPages.1.title': return 'Second Modifier Page';
			case 'onboarding.greet': return ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male:
						return 'Hello Mr ${lastName} and ${_root.onboarding.welcome(fullName: fullName)}';
					case GenderContext.female:
						return 'Hello Ms ${lastName} and ${_root.onboarding.bye(firstName: firstName)}';
				}
			};
			case 'onboarding.greet2': return ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male:
						return 'Hello Mr';
					case GenderContext.female:
						return 'Hello Ms';
				}
			};
			case 'onboarding.greetCombination': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
			case 'onboarding.welcomeLinkedPlural': return ({required num n, required Object fullName, required Object firstName}) => 'Hello ${_root.group.users(n: n, fullName: fullName, firstName: firstName)}';
			case 'onboarding.welcomeLinkedContext': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hello ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'onboarding.welcomeFullLink': return ({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimate ${_root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'group.users': return ({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'))(n,
				zero: 'No Users and ${_root.onboarding.welcome(fullName: fullName)}',
				one: 'One User',
				other: '${n} Users and ${_root.onboarding.bye(firstName: firstName)}',
			);
			case 'end.stringPages.0': return '1st Page';
			case 'end.stringPages.1': return '2nd Page';
			case 'end.pages.0.unknown': return 'Unknown\nError';
			case 'end.pages.1.with space': return 'An Error';
			case 'end.pages.1.with second space': return 'An 2nd Error';
			case 'advancedPlural': return ({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
				n: count,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('en'),
				one: () => TextSpan(children: [
					const TextSpan(text: 'One'),
				]),
				other: () => TextSpan(children: [
					const TextSpan(text: 'Other '),
					countBuilder(count),
					TextSpan(text: ', ${_root.onboarding.greet2(gender: gender)}'),
				]),
			);
			default: return null;
		}
	}
}

extension on _TranslationsDe {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'onboarding.welcome': return ({required Object fullName}) => 'Willkommen ${fullName}';
			case 'onboarding.bye': return ({required Object firstName}) => 'TschÃ¼ss ${firstName}';
			case 'onboarding.hi': return ({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
				const TextSpan(text: 'Hi '),
				name,
				TextSpan(text: ' und ${_root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)}'),
			]);
			case 'onboarding.pages.0.title': return 'Erste Seite';
			case 'onboarding.pages.0.content': return 'Erster Seiteninhalt';
			case 'onboarding.pages.1.title': return 'Zweite Seite';
			case 'onboarding.modifierPages.0.title': return 'Erste Modifier Seite';
			case 'onboarding.modifierPages.0.content': return 'Erster Seiteninhalt';
			case 'onboarding.modifierPages.1.title': return 'Zweite Modifier Seite';
			case 'onboarding.greet': return ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male:
						return 'Hallo Herr ${lastName} und ${_root.onboarding.welcome(fullName: fullName)}';
					case GenderContext.female:
						return 'Hallo Frau ${lastName} und ${_root.onboarding.bye(firstName: firstName)}';
				}
			};
			case 'onboarding.greet2': return ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male:
						return 'Hallo Herr';
					case GenderContext.female:
						return 'Hallo Frau';
				}
			};
			case 'onboarding.greetCombination': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
			case 'onboarding.welcomeLinkedPlural': return ({required num n, required Object fullName, required Object firstName}) => 'Hallo ${_root.group.users(n: n, fullName: fullName, firstName: firstName)}';
			case 'onboarding.welcomeLinkedContext': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hallo ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'onboarding.welcomeFullLink': return ({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimative ${_root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'group.users': return ({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'))(n,
				zero: 'Keine Nutzer und ${_root.onboarding.welcome(fullName: fullName)}',
				one: 'Ein Nutzer',
				other: '${n} Nutzer und ${_root.onboarding.bye(firstName: firstName)}',
			);
			case 'end.stringPages.0': return '1. Seite';
			case 'end.stringPages.1': return '2. Seite';
			case 'end.pages.0.unknown': return 'Unbekannter\nFehler';
			case 'end.pages.1.with space': return 'Ein Fehler';
			case 'end.pages.1.with second space': return 'Ein 2. Fehler';
			case 'advancedPlural': return ({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
				n: count,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'),
				one: () => TextSpan(children: [
					const TextSpan(text: 'Eins'),
				]),
				other: () => TextSpan(children: [
					const TextSpan(text: 'Andere '),
					countBuilder(count),
					TextSpan(text: ', ${_root.onboarding.greet2(gender: gender)}'),
				]),
			);
			default: return null;
		}
	}
}
