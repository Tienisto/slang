///
/// Generated file. Do not edit.
///
// coverage:ignore-file
// ignore_for_file: type=lint, unused_import

import 'package:flutter/widgets.dart';
import 'package:slang/node.dart';
import 'translations.cgm.dart';

// Path: <root>
class TranslationsDe extends Translations {
	/// You can call this constructor and build your own translation instance of this locale.
	/// Constructing via the enum [AppLocale.build] is preferred.
	TranslationsDe({Map<String, Node>? overrides, PluralResolver? cardinalResolver, PluralResolver? ordinalResolver})
		: assert(overrides == null, 'Set "translation_overrides: true" in order to enable this feature.'),
		  $meta = TranslationMetadata(
		    locale: AppLocale.de,
		    overrides: overrides ?? {},
		    cardinalResolver: cardinalResolver,
		    ordinalResolver: ordinalResolver,
		  ),
		  super.build(cardinalResolver: cardinalResolver, ordinalResolver: ordinalResolver) {
		super.$meta.setFlatMapFunction($meta.getTranslation); // copy base translations to super.$meta
		$meta.setFlatMapFunction(_flatMapFunction);
	}

	/// Metadata for the translations of <de>.
	@override final TranslationMetadata<AppLocale, Translations> $meta;

	/// Access flat map
	@override dynamic operator[](String key) => $meta.getTranslation(key) ?? super.$meta.getTranslation(key);

	late final TranslationsDe _root = this; // ignore: unused_field

	// Translations
	@override late final _TranslationsOnboardingDe onboarding = _TranslationsOnboardingDe._(_root);
	@override late final _TranslationsGroupDe group = _TranslationsGroupDe._(_root);
	@override late final _TranslationsEndDe end = _TranslationsEndDe._(_root);
	@override TextSpan advancedPlural({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
		n: count,
		resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'),
		one: () => TextSpan(children: [
			const TextSpan(text: 'Eins'),
		]),
		other: () => TextSpan(children: [
			const TextSpan(text: 'Andere '),
			countBuilder(count),
			TextSpan(text: ', ${_root.onboarding.greet2(gender: gender)}'),
		]),
	);
}

// Path: onboarding
class _TranslationsOnboardingDe extends TranslationsOnboardingEn {
	_TranslationsOnboardingDe._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String welcome({required Object fullName}) => 'Willkommen ${fullName}';
	@override String welcomeAlias({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);
	@override String welcomeOnlyParam({required Object firstName}) => '${firstName}';

	/// Bye text
	@override String bye({required Object firstName}) => 'Tschüss ${firstName}';

	@override TextSpan hi({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
		const TextSpan(text: 'Hi '),
		name,
		TextSpan(text: ' und ${_root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)}'),
	]);
	@override List<PageData> get pages => [
		_TranslationsOnboarding$pages$0i0$De._(_root),
		_TranslationsOnboarding$pages$0i1$De._(_root),
	];
	@override List<MPage> get modifierPages => [
		_TranslationsOnboarding$modifierPages$0i0$De._(_root),
		_TranslationsOnboarding$modifierPages$0i1$De._(_root),
	];
	@override String greet({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
		switch (context) {
			case GenderContext.male:
				return 'Hallo Herr ${lastName} und ${_root.onboarding.welcome(fullName: fullName)}';
			case GenderContext.female:
				return 'Hallo Frau ${lastName} und ${_root.onboarding.bye(firstName: firstName)}';
		}
	}
	@override String greet2({required GenderContext gender}) {
		switch (gender) {
			case GenderContext.male:
				return 'Hallo Herr';
			case GenderContext.female:
				return 'Hallo Frau';
		}
	}
	@override String greetCombination({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
	@override String welcomeLinkedPlural({required num n, required Object fullName, required Object firstName}) => 'Hallo ${_root.group.users(n: n, fullName: fullName, firstName: firstName)}';
	@override String welcomeLinkedContext({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hallo ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
	@override String welcomeFullLink({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimative ${_root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
}

// Path: group
class _TranslationsGroupDe extends TranslationsGroupEn {
	_TranslationsGroupDe._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String users({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'))(n,
		zero: 'Keine Nutzer und ${_root.onboarding.welcome(fullName: fullName)}',
		one: 'Ein Nutzer',
		other: '${n} Nutzer und ${_root.onboarding.bye(firstName: firstName)}',
	);
}

// Path: end
class _TranslationsEndDe extends TranslationsEndEn with EndData {
	_TranslationsEndDe._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override List<String> get stringPages => [
		'1. Seite',
		'2. Seite',
	];
	@override List<Map<String, String>> get pages => [
		{
			'unknown': 'Unbekannter\nFehler',
		},
		{
			'with space': 'Ein Fehler',
			'with second space': 'Ein 2. Fehler',
		},
	];
}

// Path: onboarding.pages.0
class _TranslationsOnboarding$pages$0i0$De extends TranslationsOnboarding$pages$0i0$En with PageData {
	_TranslationsOnboarding$pages$0i0$De._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => 'Erste Seite';
	@override String? get content => 'Erster Seiteninhalt';
}

// Path: onboarding.pages.1
class _TranslationsOnboarding$pages$0i1$De extends TranslationsOnboarding$pages$0i1$En with PageData {
	_TranslationsOnboarding$pages$0i1$De._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => 'Zweite Seite';
}

// Path: onboarding.modifierPages.0
class _TranslationsOnboarding$modifierPages$0i0$De extends TranslationsOnboarding$modifierPages$0i0$En with MPage {
	_TranslationsOnboarding$modifierPages$0i0$De._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => 'Erste Modifier Seite';
	@override String? get content => 'Erster Seiteninhalt';
}

// Path: onboarding.modifierPages.1
class _TranslationsOnboarding$modifierPages$0i1$De extends TranslationsOnboarding$modifierPages$0i1$En with MPage {
	_TranslationsOnboarding$modifierPages$0i1$De._(TranslationsDe root) : this._root = root, super._(root);

	final TranslationsDe _root; // ignore: unused_field

	// Translations
	@override String get title => 'Zweite Modifier Seite';
}

/// Flat map(s) containing all translations.
/// Only for edge cases! For simple maps, use the map function of this library.
extension on TranslationsDe {
	dynamic _flatMapFunction(String path) {
		switch (path) {
			case 'onboarding.welcome': return ({required Object fullName}) => 'Willkommen ${fullName}';
			case 'onboarding.welcomeAlias': return ({required Object fullName}) => _root.onboarding.welcome(fullName: fullName);
			case 'onboarding.welcomeOnlyParam': return ({required Object firstName}) => '${firstName}';
			case 'onboarding.bye': return ({required Object firstName}) => 'Tschüss ${firstName}';
			case 'onboarding.hi': return ({required InlineSpan name, required Object lastName, required GenderContext context, required Object fullName, required Object firstName}) => TextSpan(children: [
				const TextSpan(text: 'Hi '),
				name,
				TextSpan(text: ' und ${_root.onboarding.greet(lastName: lastName, context: context, fullName: fullName, firstName: firstName)}'),
			]);
			case 'onboarding.pages.0.title': return 'Erste Seite';
			case 'onboarding.pages.0.content': return 'Erster Seiteninhalt';
			case 'onboarding.pages.1.title': return 'Zweite Seite';
			case 'onboarding.modifierPages.0.title': return 'Erste Modifier Seite';
			case 'onboarding.modifierPages.0.content': return 'Erster Seiteninhalt';
			case 'onboarding.modifierPages.1.title': return 'Zweite Modifier Seite';
			case 'onboarding.greet': return ({required GenderContext context, required Object lastName, required Object fullName, required Object firstName}) {
				switch (context) {
					case GenderContext.male:
						return 'Hallo Herr ${lastName} und ${_root.onboarding.welcome(fullName: fullName)}';
					case GenderContext.female:
						return 'Hallo Frau ${lastName} und ${_root.onboarding.bye(firstName: firstName)}';
				}
			};
			case 'onboarding.greet2': return ({required GenderContext gender}) {
				switch (gender) {
					case GenderContext.male:
						return 'Hallo Herr';
					case GenderContext.female:
						return 'Hallo Frau';
				}
			};
			case 'onboarding.greetCombination': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context, required GenderContext gender}) => '${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}, ${_root.onboarding.greet2(gender: gender)}';
			case 'onboarding.welcomeLinkedPlural': return ({required num n, required Object fullName, required Object firstName}) => 'Hallo ${_root.group.users(n: n, fullName: fullName, firstName: firstName)}';
			case 'onboarding.welcomeLinkedContext': return ({required Object lastName, required Object fullName, required Object firstName, required GenderContext context}) => 'Hallo ${_root.onboarding.greet(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'onboarding.welcomeFullLink': return ({required num n, required Object fullName, required Object firstName, required Object lastName, required GenderContext context}) => 'Ultimative ${_root.onboarding.welcomeLinkedPlural(n: n, fullName: fullName, firstName: firstName)} and ${_root.onboarding.welcomeLinkedContext(lastName: lastName, fullName: fullName, firstName: firstName, context: context)}';
			case 'group.users': return ({required num n, required Object fullName, required Object firstName}) => (_root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'))(n,
				zero: 'Keine Nutzer und ${_root.onboarding.welcome(fullName: fullName)}',
				one: 'Ein Nutzer',
				other: '${n} Nutzer und ${_root.onboarding.bye(firstName: firstName)}',
			);
			case 'end.stringPages.0': return '1. Seite';
			case 'end.stringPages.1': return '2. Seite';
			case 'end.pages.0.unknown': return 'Unbekannter\nFehler';
			case 'end.pages.1.with space': return 'Ein Fehler';
			case 'end.pages.1.with second space': return 'Ein 2. Fehler';
			case 'advancedPlural': return ({required num count, required InlineSpan Function(num) countBuilder, required GenderContext gender}) => RichPluralResolvers.bridge(
				n: count,
				resolver: _root.$meta.cardinalResolver ?? PluralResolvers.cardinal('de'),
				one: () => TextSpan(children: [
					const TextSpan(text: 'Eins'),
				]),
				other: () => TextSpan(children: [
					const TextSpan(text: 'Andere '),
					countBuilder(count),
					TextSpan(text: ', ${_root.onboarding.greet2(gender: gender)}'),
				]),
			);
			default: return null;
		}
	}
}

